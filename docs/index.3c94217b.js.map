{"mappings":"AAUO,MAAMA,EAEZC,YAAYC,GACXC,KAAKD,SAAWA,EAEjBE,OAAOC,IACPC,KAAKD,EAAeE,IACpBC,oBAAoBC,IACpBC,kBAAkBD,KChBZ,MAAME,EAAc,CAC1BT,EACAU,EACAC,IAGCX,EAASY,EACR,KAAsB,QAAfD,EAAuBD,EAAUG,GAAkB,EAAdH,EAAUG,IACvDb,EAASY,GAAoB,QAAfD,EAAuB,EAAI,EAAID,EAAUG,IACvDb,EAASc,EAAI,IAAMJ,EAAUK,GAC7Bf,EAASc,EAAI,ECZf,IAAOE,YAAKA,GAAAA,EAAAA,EACT,GAAF,GAAA,KADWA,EAAAA,EAEP,KAAJ,GAAA,OAFWA,EAAAA,EAGP,KAAJ,GAAA,OAHWA,EAAAA,EAIN,MAAL,GAAA,SAJWA,IAAAA,EAAQ,KAWb,IAAIC,EAAS,CACnBC,QAASF,EAASG,GAClBC,UAAWJ,EAASK,KACpBC,UAAWN,EAASO,KACpBC,WAAYR,EAASS,OCVf,MAAMC,UAAc5B,EAS1BC,YACC4B,EAAa,CAAEd,EAAG,GAAIE,EAAG,IACzBa,EAAoB,CAAEhB,EAAG,GAAIE,EAAG,MAEhCe,MAAMD,GACN3B,KAAK6B,UAAYH,EACjB1B,KAAK8B,WAAa,MAClB9B,KAAK+B,WAAa,EAClB/B,KAAKgC,iBAAmB,EACxBhC,KAAKiC,YAAcjB,EACnBhB,KAAKkC,SAAW,EAChBlC,KAAKmC,MAAO,EAEblC,OAAOC,GAENF,KAAK+B,WAA+B,GAAlB/B,KAAK+B,WAAmB/B,KAAKgC,iBAC/C,IAAII,EAAa,EACjB,GAAIpC,KAAKmC,KAAM,CAEdnC,KAAKkC,UAAY,GACjBE,EAAa,GAAKC,KAAKC,IAAI,GAAKtC,KAAKkC,SAAWhC,GAAS,GACvCqC,OAAOH,EAAWI,QAAQ,IAC5B,KACfJ,EAAa,GACbpC,KAAKmC,MAAO,GAGd,IAAIM,EAAgB,CACnB9B,EAAGX,KAAKD,SAASY,EAAIX,KAAK+B,WAAa7B,EACvCW,EAAG,IAAMuB,GAEN5B,EAAYiC,EAAQzC,KAAK6B,UAAW7B,KAAK8B,cAC5C9B,KAAKD,SAAW0C,GAGlBtC,KAAKD,EAAeE,GACnBA,EAAIsC,UAAY1C,KAAK8B,WACrB1B,EAAIuC,SACH3C,KAAKD,SAASY,EACdX,KAAKD,SAASc,EACdb,KAAK6B,UAAUjB,EACfZ,KAAK6B,UAAUf,GAGjBT,oBAAoBC,GACnB,IAAIsC,EAAQ5C,KAAKiC,YAAY3B,GACzBsC,GAAS7B,EAASO,KACrBtB,KAAKgC,kBAAmB,GACdY,GAAS7B,EAASS,MAC5BxB,KAAKgC,iBAAmB,GACdY,GAAS7B,EAASG,KAC5B2B,QAAQC,IAAI,SACZ9C,KAAKmC,MAAO,GAGd5B,kBAAkBD,GACjB,IAAIsC,EAAQ5C,KAAKiC,YAAY3B,IACzBsC,GAAS7B,EAASS,OAEXoB,GAAS7B,EAASO,QAD5BtB,KAAKgC,iBAAmB,ICnEpB,MAAMe,UAAelD,EAK3BC,YACC4B,EAAa,CAAEd,EAAG,GAAIE,EAAG,IACzBa,EAAoB,CAAEhB,EAAG,IAAMe,EAAKd,EAAGC,EAAG,MAE1Ce,MAAMD,GACN3B,KAAKgD,WAAatB,EAClB1B,KAAKiD,YAAc,OACnBjD,KAAKkD,YAAc,GAEpBjD,OAAOC,GACN,IAAIuC,EAAgB,CACnB9B,EAAGX,KAAKD,SAASY,EAAIX,KAAKkD,YAAchD,EACxCW,EAAGb,KAAKD,SAASc,GAEdL,EAAYiC,EAAQzC,KAAKgD,WAAYhD,KAAKiD,aAC7CjD,KAAKD,SAAW0C,EAEhBzC,KAAKD,SAAW,CAAEY,EAAG,IAAMX,KAAKgD,WAAWpC,EAAGC,EAAG,KAGnDV,KAAKD,EAAeE,GACnBA,EAAIsC,UAAY1C,KAAKiD,YACrB7C,EAAIuC,SACH3C,KAAKD,SAASY,EACdX,KAAKD,SAASc,EACdb,KAAKgD,WAAWpC,EAChBZ,KAAKgD,WAAWlC,IClCZ,MAAMqC,UAAkBtD,EAC9BI,UACAmD,kBACAjD,KAAKD,EAAeE,GACnB,MAAMiD,GAAO,EAAInD,GAAOsC,QAAQ,GAChCpC,EAAIkD,KAAO,aACXlD,EAAIsC,UAAY,QAChBtC,EAAImD,SAAS,QAAQF,IAAOrD,KAAKD,SAASY,EAAGX,KAAKD,SAASc,ICNtD,MAAM2C,UAAc3D,EAE1BC,YAAY6B,EAAoB,CAAEhB,EAAG,IAAKE,EAAG,KAC5Ce,MAAMD,GACN3B,KAAKyD,MAAQ,EAEdxD,UACAmD,kBACAjD,KAAKD,EAAeE,GACnBJ,KAAKyD,OAAS,EACdrD,EAAIkD,KAAO,aACXlD,EAAIsC,UAAY,QAChBtC,EAAImD,SACH,UAAUvD,KAAKyD,MAAQ,IAAIjB,QAAQ,KACnCxC,KAAKD,SAASY,EACdX,KAAKD,SAASc,ICZjB6C,OAAOC,OAAS,KACfd,QAAQC,IAAI,SAEZ,MAAMc,EAASC,SAASC,eAAe,UACjC1D,EAAMwD,EAAOG,WAAW,MAExBC,EAAQ,IAAIvC,EACZwC,EAAS,IAAIlB,EACbM,EAAM,IAAIF,EAAU,CAAExC,EAAG,EAAGE,EAAG,KAC/B4C,EAAQ,IAAID,EAEZU,EAAwB,CAACD,EAAQD,EAAOX,EAAKI,GAEnD,IAAIU,EAAY,EAChB,MAAMC,EAAUC,IACf,MAAMnE,GAASmE,EAAOF,GAAa,IACnCA,EAAYE,EAEZH,EAAOI,SAASC,GAAUA,EAAMtE,OAAOC,KACvCE,EAAIoE,UAAU,EAAG,EAAGZ,EAAOa,MAAOb,EAAOc,QACzCR,EAAOI,SAASC,GAAUA,EAAMpE,KAAKD,EAAOE,KAE5CsD,OAAOiB,sBAAsBP,IAG9BP,SAASe,KAAKC,iBAAiB,WAAYC,IACtCd,EAAM3D,qBACT2D,EAAM3D,oBAAoByE,EAAExE,QAG9BuD,SAASe,KAAKC,iBAAiB,SAAUC,IACpCd,EAAMzD,mBACTyD,EAAMzD,kBAAkBuE,EAAExE,QAI5BoD,OAAOiB,sBAAsBP","sources":["src/actors/Actor.ts","src/utils/checkLimits.ts","src/utils/keyboardMap.ts","src/actors/Mario.ts","src/actors/Goomba.ts","src/actors/FPSViewer.ts","src/actors/Score.ts","src/script.ts"],"sourcesContent":["import { Point } from '../types/Point';\n\nexport interface IActor {\n\tposition: Point;\n\tupdate: (delta: number) => void;\n\tdraw: (delta: number, ctx: CanvasRenderingContext2D) => void;\n\tkey_event_down?: (key: string) => void;\n\tkey_event_up?: (key: string) => void;\n}\n\nexport class Actor implements IActor {\n\tposition: Point;\n\tconstructor(position: Point) {\n\t\tthis.position = position;\n\t}\n\tupdate(delta: number) {}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {}\n\tkeyboard_event_down(key: string) {}\n\tkeyboard_event_up(key: string) {}\n}\n","import { Point } from '../types/Point';\nimport { Size } from '../types/Size';\nexport const checkLimits = (\n\tposition: Point,\n\tactorSize: Size,\n\tactorColor: string\n) => {\n\tif (\n\t\tposition.x <\n\t\t\t500 - (actorColor === 'red' ? actorSize.w : actorSize.w * -1) &&\n\t\tposition.x > (actorColor === 'red' ? 0 : 0 - actorSize.w) &&\n\t\tposition.y < 500 - actorSize.h &&\n\t\tposition.y > 0\n\t) {\n\t\treturn true;\n\t}\n\treturn false;\n};\n","export enum MarioKey {\n\tUP,\n\tDOWN,\n\tLEFT,\n\tRIGHT,\n}\n\nexport interface KeyboardMap {\n\t[key: string]: MarioKey;\n}\n\nexport let KEYMAP = {\n\tArrowUp: MarioKey.UP,\n\tArrowDown: MarioKey.DOWN,\n\tArrowLeft: MarioKey.LEFT,\n\tArrowRight: MarioKey.RIGHT,\n};\n","import { Point } from '../types/Point';\nimport { Size } from '../types/Size';\nimport { Actor } from './Actor';\nimport { checkLimits } from '../utils/checkLimits';\nimport { MarioKey, KeyboardMap, KEYMAP } from '../utils/keyboardMap';\nexport class Mario extends Actor {\n\tmarioSize: Size;\n\tmarioColor: string;\n\tmarioSpeed: number;\n\tmarioAceleration: number;\n\tkeyboardMap: KeyboardMap;\n\tjumSpeed: number;\n\tjump: boolean;\n\n\tconstructor(\n\t\tsize: Size = { w: 30, h: 30 },\n\t\tinitialPos: Point = { x: 10, y: 350 }\n\t) {\n\t\tsuper(initialPos);\n\t\tthis.marioSize = size;\n\t\tthis.marioColor = 'red';\n\t\tthis.marioSpeed = 0;\n\t\tthis.marioAceleration = 0;\n\t\tthis.keyboardMap = KEYMAP;\n\t\tthis.jumSpeed = 0;\n\t\tthis.jump = false;\n\t}\n\tupdate(delta: number) {\n\t\t// Establecemos una velocidad en relación a la aceleración\n\t\tthis.marioSpeed = this.marioSpeed * 0.9 + this.marioAceleration;\n\t\tlet jumpHeight = 0;\n\t\tif (this.jump) {\n\t\t\t// NOTE: I am not happy with this jump section. The sine is a good idea but the control of the zero limit can be improved.\n\t\t\tthis.jumSpeed += 0.8;\n\t\t\tjumpHeight = 40 * Math.sin(10 * this.jumSpeed * delta) + 40;\n\t\t\tconst checkCero = Number(jumpHeight.toFixed(2));\n\t\t\tif (checkCero < 0.1) {\n\t\t\t\tjumpHeight = 0.1;\n\t\t\t\tthis.jump = false;\n\t\t\t}\n\t\t}\n\t\tlet newPos: Point = {\n\t\t\tx: this.position.x + this.marioSpeed * delta,\n\t\t\ty: 350 - jumpHeight,\n\t\t};\n\t\tif (checkLimits(newPos, this.marioSize, this.marioColor)) {\n\t\t\tthis.position = newPos;\n\t\t}\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tctx.fillStyle = this.marioColor;\n\t\tctx.fillRect(\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tthis.marioSize.w,\n\t\t\tthis.marioSize.h\n\t\t);\n\t}\n\tkeyboard_event_down(key: string) {\n\t\tlet tecla = this.keyboardMap[key];\n\t\tif (tecla == MarioKey.LEFT) {\n\t\t\tthis.marioAceleration = -10;\n\t\t} else if (tecla == MarioKey.RIGHT) {\n\t\t\tthis.marioAceleration = 10;\n\t\t} else if (tecla == MarioKey.UP) {\n\t\t\tconsole.log('JUMP!');\n\t\t\tthis.jump = true;\n\t\t}\n\t}\n\tkeyboard_event_up(key: string) {\n\t\tlet tecla = this.keyboardMap[key];\n\t\tif (tecla == MarioKey.RIGHT) {\n\t\t\tthis.marioAceleration = 0;\n\t\t} else if (tecla == MarioKey.LEFT) {\n\t\t\tthis.marioAceleration = 0;\n\t\t}\n\t}\n}\n","import { Point } from '../types/Point';\nimport { Size } from '../types/Size';\nimport { Actor } from './Actor';\nimport { checkLimits } from '../utils/checkLimits';\n\nexport class Goomba extends Actor {\n\tgoombaSize: Size;\n\tgoombaColor: string;\n\tgoombaSpeed: number;\n\n\tconstructor(\n\t\tsize: Size = { w: 30, h: 30 },\n\t\tinitialPos: Point = { x: 500 + size.w, y: 350 }\n\t) {\n\t\tsuper(initialPos);\n\t\tthis.goombaSize = size;\n\t\tthis.goombaColor = 'blue';\n\t\tthis.goombaSpeed = 40;\n\t}\n\tupdate(delta: number) {\n\t\tlet newPos: Point = {\n\t\t\tx: this.position.x - this.goombaSpeed * delta,\n\t\t\ty: this.position.y,\n\t\t};\n\t\tif (checkLimits(newPos, this.goombaSize, this.goombaColor)) {\n\t\t\tthis.position = newPos;\n\t\t} else {\n\t\t\tthis.position = { x: 500 + this.goombaSize.w, y: 350 };\n\t\t}\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tctx.fillStyle = this.goombaColor;\n\t\tctx.fillRect(\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tthis.goombaSize.w,\n\t\t\tthis.goombaSize.h\n\t\t);\n\t}\n}\n","import { Actor } from './Actor';\n\nexport class FPSViewer extends Actor {\n\tupdate() {}\n\tkeyboard_event() {}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tconst fps = (1 / delta).toFixed(2);\n\t\tctx.font = '15px Arial';\n\t\tctx.fillStyle = 'black';\n\t\tctx.fillText(`FPS: ${fps}`, this.position.x, this.position.y);\n\t}\n}\n","import { Point } from '../types/Point';\nimport { Actor } from './Actor';\n\nexport class Score extends Actor {\n\tscore: number;\n\tconstructor(initialPos: Point = { x: 100, y: 15 }) {\n\t\tsuper(initialPos);\n\t\tthis.score = 0;\n\t}\n\tupdate() {}\n\tkeyboard_event() {}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tthis.score += 1;\n\t\tctx.font = '15px Arial';\n\t\tctx.fillStyle = 'black';\n\t\tctx.fillText(\n\t\t\t`SCORE:${(this.score / 30).toFixed(0)}`,\n\t\t\tthis.position.x,\n\t\t\tthis.position.y\n\t\t);\n\t}\n}\n","import { Actor, IActor } from './actors/Actor';\nimport { Mario } from './actors/Mario';\nimport { Goomba } from './actors/Goomba';\nimport { FPSViewer } from './actors/FPSViewer';\nimport { Score } from './actors/Score';\n\nwindow.onload = () => {\n\tconsole.log('ready');\n\n\tconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\n\tconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n\tconst mario = new Mario();\n\tconst goomba = new Goomba();\n\tconst fps = new FPSViewer({ x: 5, y: 15 });\n\tconst score = new Score();\n\n\tconst actors: Array<IActor> = [goomba, mario, fps, score];\n\n\tlet lastFrame = 0;\n\tconst render = (time: number) => {\n\t\tconst delta = (time - lastFrame) / 1000;\n\t\tlastFrame = time;\n\n\t\tactors.forEach((actor) => actor.update(delta));\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tactors.forEach((actor) => actor.draw(delta, ctx));\n\n\t\twindow.requestAnimationFrame(render);\n\t};\n\n\tdocument.body.addEventListener('keydown', (e) => {\n\t\tif (mario.keyboard_event_down) {\n\t\t\tmario.keyboard_event_down(e.key);\n\t\t}\n\t});\n\tdocument.body.addEventListener('keyup', (e) => {\n\t\tif (mario.keyboard_event_up) {\n\t\t\tmario.keyboard_event_up(e.key);\n\t\t}\n\t});\n\n\twindow.requestAnimationFrame(render);\n};\n"],"names":["$1be9d8d1634ad3ea$export$f73d3eb6fd876d80","constructor","position","this","update","delta","draw","ctx","keyboard_event_down","key","keyboard_event_up","$cf9377d87986ca70$export$b427d64c03133802","actorSize","actorColor","x","w","y","h","$45ecd8466228168a$export$931f1d909de3dad0","$45ecd8466228168a$export$194e66e3e22b15bb","ArrowUp","UP","ArrowDown","DOWN","ArrowLeft","LEFT","ArrowRight","RIGHT","$f9f6af20bd5a23c3$export$fc975b129559c2d","size","initialPos","super","marioSize","marioColor","marioSpeed","marioAceleration","keyboardMap","jumSpeed","jump","jumpHeight","Math","sin","Number","toFixed","newPos","fillStyle","fillRect","tecla","console","log","$a173b08dc58b0d5c$export$1c7bc1ba3d7e84e5","goombaSize","goombaColor","goombaSpeed","$e56a6a181a9d7472$export$13acb86b4b3ca30e","keyboard_event","fps","font","fillText","$6d99279b8c5c9c06$export$6735cf84ecd2736","score","window","onload","canvas","document","getElementById","getContext","mario","goomba","actors","lastFrame","render","time","forEach","actor","clearRect","width","height","requestAnimationFrame","body","addEventListener","e"],"version":3,"file":"index.3c94217b.js.map"}