{"mappings":"AAUO,MAAMA,EAEZC,YAAYC,GACXC,KAAKD,SAAWA,EAEjBE,OAAOC,IACPC,KAAKD,EAAeE,IACpBC,oBAAoBC,IACpBC,kBAAkBD,KChBZ,MAAME,EAAc,CAC1BT,EACAU,EACAC,KAEA,MAAMC,EAA0C,CAC/CC,MAAO,IAAMH,EAAUI,EACvBC,KAAM,GAMP,MAJmB,QAAfJ,IACHC,EAAOC,MAAQ,IAAMH,EAAUI,EAC/BF,EAAOG,KAAO,EAAIL,EAAUI,GAG5Bd,EAASgB,EAAIJ,EAAOC,OACpBb,EAASgB,EAAIJ,EAAOG,MACpBf,EAASiB,EAAI,IAAMP,EAAUQ,GAC7BlB,EAASiB,EAAI,GCdR,MAAME,UAAerB,EAK3BC,YACCqB,EAAa,CAAEN,EAAG,GAAII,EAAG,IACzBG,EAAoB,CAAEL,EAAG,IAAMI,EAAKN,EAAGG,EAAG,MAE1CK,MAAMD,GACNpB,KAAKsB,WAAaH,EAClBnB,KAAKuB,YAAc,OACnBvB,KAAKwB,YAAc,GAEpBvB,OAAOC,GACN,IAAIuB,EAAgB,CACnBV,EAAGf,KAAKD,SAASgB,EAAIf,KAAKwB,YAActB,EACxCc,EAAGhB,KAAKD,SAASiB,GAEdR,EAAYiB,EAAQzB,KAAKsB,WAAYtB,KAAKuB,eAC7CvB,KAAKD,SAAW0B,GAGlBtB,KAAKD,EAAeE,GACnBA,EAAIsB,UAAY1B,KAAKuB,YACrBnB,EAAIuB,SACH3B,KAAKD,SAASgB,EACdf,KAAKD,SAASiB,EACdhB,KAAKsB,WAAWT,EAChBb,KAAKsB,WAAWL,IClCnB,IAAOW,YAAKA,GAAAA,EAAAA,EACT,GAAF,GAAA,KADWA,EAAAA,EAEP,KAAJ,GAAA,OAFWA,EAAAA,EAGP,KAAJ,GAAA,OAHWA,EAAAA,EAIN,MAAL,GAAA,SAJWA,IAAAA,EAAQ,KAWb,IAAIC,EAAS,CACnBC,QAASF,EAASG,GAClBC,UAAWJ,EAASK,KACpBC,UAAWN,EAASO,KACpBC,WAAYR,EAASS,OCTf,MAAMC,UAAczC,EAO1BC,YACCqB,EAAa,CAAEN,EAAG,GAAII,EAAG,IACzBG,EAAoB,CAAEL,EAAG,GAAIC,EAAG,MAEhCK,MAAMD,GACNpB,KAAKuC,UAAYpB,EACjBnB,KAAKwC,WAAa,MAClBxC,KAAKyC,WAAa,EAClBzC,KAAK0C,iBAAmB,EACxB1C,KAAK2C,YAAcd,EAEpB5B,OAAOC,GAENF,KAAKyC,WAA+B,GAAlBzC,KAAKyC,WAAmBzC,KAAK0C,iBAC/C,IAAIjB,EAAgB,CACnBV,EAAGf,KAAKD,SAASgB,EAAIf,KAAKyC,WAAavC,EACvCc,EAAGhB,KAAKD,SAASiB,GAEdR,EAAYiB,EAAQzB,KAAKuC,UAAWvC,KAAKwC,cAC5CxC,KAAKD,SAAW0B,GAGlBtB,KAAKD,EAAeE,GACnBA,EAAIsB,UAAY1B,KAAKwC,WACrBpC,EAAIuB,SACH3B,KAAKD,SAASgB,EACdf,KAAKD,SAASiB,EACdhB,KAAKuC,UAAU1B,EACfb,KAAKuC,UAAUtB,GAGjBZ,oBAAoBC,GACnB,IAAIsC,EAAQ5C,KAAK2C,YAAYrC,GACzBsC,GAAShB,EAASO,KACrBnC,KAAK0C,kBAAmB,GACdE,GAAShB,EAASS,QAC5BrC,KAAK0C,iBAAmB,IAG1BnC,kBAAkBD,GACjB,IAAIsC,EAAQ5C,KAAK2C,YAAYrC,IACzBsC,GAAShB,EAASS,OAEXO,GAAShB,EAASO,QAD5BnC,KAAK0C,iBAAmB,ICpD3BG,OAAOC,OAAS,KACfC,QAAQC,IAAI,SAEZ,MAAMC,EAASC,SAASC,eAAe,UACjC/C,EAAM6C,EAAOG,WAAW,MAExBC,EAAQ,IAAIf,EAGZgB,EAAS,CAFA,IAAIpC,EAEKmC,GAExB,IAAIE,EAAY,EAChB,MAAMC,EAAUC,IACf,MAAMvD,GAASuD,EAAOF,GAAa,IACnCA,EAAYE,EAEZH,EAAOI,SAASC,GAAUA,EAAM1D,OAAOC,KACvCE,EAAIwD,UAAU,EAAG,EAAGX,EAAOY,MAAOZ,EAAOa,QACzCR,EAAOI,SAASC,GAAUA,EAAMxD,KAAKD,EAAOE,KAE5CyC,OAAOkB,sBAAsBP,IAG9BN,SAASc,KAAKC,iBAAiB,WAAYC,IACtCb,EAAMhD,qBACTgD,EAAMhD,oBAAoB6D,EAAE5D,QAG9B4C,SAASc,KAAKC,iBAAiB,SAAUC,IACpCb,EAAM9C,mBACT8C,EAAM9C,kBAAkB2D,EAAE5D,QAI5BuC,OAAOkB,sBAAsBP","sources":["src/actors/Actor.ts","src/utils/checkLimits.ts","src/actors/Goomba.ts","src/utils/keyboardMap.ts","src/actors/Mario.ts","src/script.ts"],"sourcesContent":["import { Point } from '../types/Point';\n\nexport interface IActor {\n\tposition: Point;\n\tupdate: (delta: number) => void;\n\tdraw: (delta: number, ctx: CanvasRenderingContext2D) => void;\n\tkey_event_down: (key: string) => void;\n\tkey_event_up: (key: string) => void;\n}\n\nexport class Actor implements IActor {\n\tposition: Point;\n\tconstructor(position: Point) {\n\t\tthis.position = position;\n\t}\n\tupdate(delta: number) {}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {}\n\tkeyboard_event_down(key: string) {}\n\tkeyboard_event_up(key: string) {}\n}\n","import { Point } from '../types/Point';\nimport { Size } from '../types/Size';\nexport const checkLimits = (\n\tposition: Point,\n\tactorSize: Size,\n\tactorColor: string\n) => {\n\tconst limitX: { right: number; left: number } = {\n\t\tright: 500 - actorSize.w,\n\t\tleft: 0,\n\t};\n\tif (actorColor !== 'red') {\n\t\tlimitX.right = 500 + actorSize.w;\n\t\tlimitX.left = 0 - actorSize.w;\n\t}\n\tif (\n\t\tposition.x < limitX.right &&\n\t\tposition.x > limitX.left &&\n\t\tposition.y < 500 - actorSize.h &&\n\t\tposition.y > 0\n\t) {\n\t\t// console.log(actorSize);\n\t\treturn true;\n\t}\n\treturn false;\n};\n","import { Point } from '../types/Point';\nimport { Size } from '../types/Size';\nimport { Actor } from './Actor';\nimport { checkLimits } from '../utils/checkLimits';\n\nexport class Goomba extends Actor {\n\tgoombaSize: Size;\n\tgoombaColor: string;\n\tgoombaSpeed: number;\n\n\tconstructor(\n\t\tsize: Size = { w: 30, h: 30 },\n\t\tinitialPos: Point = { x: 500 + size.w, y: 350 }\n\t) {\n\t\tsuper(initialPos);\n\t\tthis.goombaSize = size;\n\t\tthis.goombaColor = 'blue';\n\t\tthis.goombaSpeed = 40;\n\t}\n\tupdate(delta: number) {\n\t\tlet newPos: Point = {\n\t\t\tx: this.position.x - this.goombaSpeed * delta,\n\t\t\ty: this.position.y,\n\t\t};\n\t\tif (checkLimits(newPos, this.goombaSize, this.goombaColor)) {\n\t\t\tthis.position = newPos;\n\t\t}\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tctx.fillStyle = this.goombaColor;\n\t\tctx.fillRect(\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tthis.goombaSize.w,\n\t\t\tthis.goombaSize.h\n\t\t);\n\t}\n}\n","export enum MarioKey {\n\tUP,\n\tDOWN,\n\tLEFT,\n\tRIGHT,\n}\n\nexport interface KeyboardMap {\n\t[key: string]: MarioKey;\n}\n\nexport let KEYMAP = {\n\tArrowUp: MarioKey.UP,\n\tArrowDown: MarioKey.DOWN,\n\tArrowLeft: MarioKey.LEFT,\n\tArrowRight: MarioKey.RIGHT,\n};\n","import { Point } from '../types/Point';\nimport { Size } from '../types/Size';\nimport { Actor } from './Actor';\nimport { checkLimits } from '../utils/checkLimits';\nimport { MarioKey, KeyboardMap, KEYMAP } from '../utils/keyboardMap';\n\nexport class Mario extends Actor {\n\tmarioSize: Size;\n\tmarioColor: string;\n\tmarioSpeed: number;\n\tmarioAceleration: number;\n\tkeyboardMap: KeyboardMap;\n\n\tconstructor(\n\t\tsize: Size = { w: 30, h: 30 },\n\t\tinitialPos: Point = { x: 10, y: 350 }\n\t) {\n\t\tsuper(initialPos);\n\t\tthis.marioSize = size;\n\t\tthis.marioColor = 'red';\n\t\tthis.marioSpeed = 0;\n\t\tthis.marioAceleration = 0;\n\t\tthis.keyboardMap = KEYMAP;\n\t}\n\tupdate(delta: number) {\n\t\t// Establecemos una velocidad en relación a la aceleración\n\t\tthis.marioSpeed = this.marioSpeed * 0.9 + this.marioAceleration;\n\t\tlet newPos: Point = {\n\t\t\tx: this.position.x + this.marioSpeed * delta,\n\t\t\ty: this.position.y,\n\t\t};\n\t\tif (checkLimits(newPos, this.marioSize, this.marioColor)) {\n\t\t\tthis.position = newPos;\n\t\t}\n\t}\n\tdraw(delta: number, ctx: CanvasRenderingContext2D) {\n\t\tctx.fillStyle = this.marioColor;\n\t\tctx.fillRect(\n\t\t\tthis.position.x,\n\t\t\tthis.position.y,\n\t\t\tthis.marioSize.w,\n\t\t\tthis.marioSize.h\n\t\t);\n\t}\n\tkeyboard_event_down(key: string) {\n\t\tlet tecla = this.keyboardMap[key];\n\t\tif (tecla == MarioKey.LEFT) {\n\t\t\tthis.marioAceleration = -10;\n\t\t} else if (tecla == MarioKey.RIGHT) {\n\t\t\tthis.marioAceleration = 10;\n\t\t}\n\t}\n\tkeyboard_event_up(key: string) {\n\t\tlet tecla = this.keyboardMap[key];\n\t\tif (tecla == MarioKey.RIGHT) {\n\t\t\tthis.marioAceleration = 0;\n\t\t} else if (tecla == MarioKey.LEFT) {\n\t\t\tthis.marioAceleration = 0;\n\t\t}\n\t}\n}\n","import { Goomba } from './actors/Goomba';\nimport { Mario } from './actors/Mario';\n\nwindow.onload = () => {\n\tconsole.log('ready');\n\n\tconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\n\tconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\n\tconst mario = new Mario();\n\tconst goomba = new Goomba();\n\n\tconst actors = [goomba, mario];\n\n\tlet lastFrame = 0;\n\tconst render = (time: number) => {\n\t\tconst delta = (time - lastFrame) / 1000;\n\t\tlastFrame = time;\n\n\t\tactors.forEach((actor) => actor.update(delta));\n\t\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\t\tactors.forEach((actor) => actor.draw(delta, ctx));\n\n\t\twindow.requestAnimationFrame(render);\n\t};\n\n\tdocument.body.addEventListener('keydown', (e) => {\n\t\tif (mario.keyboard_event_down) {\n\t\t\tmario.keyboard_event_down(e.key);\n\t\t}\n\t});\n\tdocument.body.addEventListener('keyup', (e) => {\n\t\tif (mario.keyboard_event_up) {\n\t\t\tmario.keyboard_event_up(e.key);\n\t\t}\n\t});\n\n\twindow.requestAnimationFrame(render);\n};\n"],"names":["$1be9d8d1634ad3ea$export$f73d3eb6fd876d80","constructor","position","this","update","delta","draw","ctx","keyboard_event_down","key","keyboard_event_up","$cf9377d87986ca70$export$b427d64c03133802","actorSize","actorColor","limitX","right","w","left","x","y","h","$a173b08dc58b0d5c$export$1c7bc1ba3d7e84e5","size","initialPos","super","goombaSize","goombaColor","goombaSpeed","newPos","fillStyle","fillRect","$45ecd8466228168a$export$931f1d909de3dad0","$45ecd8466228168a$export$194e66e3e22b15bb","ArrowUp","UP","ArrowDown","DOWN","ArrowLeft","LEFT","ArrowRight","RIGHT","$f9f6af20bd5a23c3$export$fc975b129559c2d","marioSize","marioColor","marioSpeed","marioAceleration","keyboardMap","tecla","window","onload","console","log","canvas","document","getElementById","getContext","mario","actors","lastFrame","render","time","forEach","actor","clearRect","width","height","requestAnimationFrame","body","addEventListener","e"],"version":3,"file":"index.d7fbd5ab.js.map"}